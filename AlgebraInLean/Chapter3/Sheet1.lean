import ¬´AlgebraInLean¬ª.Basic

namespace Defs

  namespace Subgroups

    -- If G is a group, then a subgroup of G is a subset of G that is itself a
    -- group under G's group operation. We encode a subgroup as a Lean
    -- structure, notably not as a type class, as we wish to represent subgroups
    -- merely as subsets with additional properties.
    structure Subgroup (G : Type*) [Group G] where
      -- We represent the subgroup's corresponding set using Mathlib's `Set`
      -- type. Upon viewing the Mathlib documentation for the set (if you are
      -- viewing this file in Visual Studio Code, you may Ctrl-Click on the
      -- keyword to consult its definiton), we see that it is merely a wrapper
      -- for `G ‚Üí Prop`, meaning it is a function that determines what is and
      -- is not in the set.
      carrier : Set G
      -- This proposition asserts that the group is nonempty, namely that the
      -- subgroup contains the identity of G.
      nonempty : ùïñ ‚àà carrier
      -- The below propositions assert that the subgroup is closed under the
      -- group operation Œº and the inverse function Œπ.
      mul_closure : ‚àÄ a b, a ‚àà carrier ‚Üí b ‚àà carrier ‚Üí Œº a b ‚àà carrier
      inv_closure : ‚àÄ a : G, a ‚àà carrier ‚Üí Œπ a ‚àà carrier

    -- This instance coerces `Subgroup G` to `Set G`.
    instance [Group G] : Coe (Subgroup G) (Set G) := ‚ü®Œª H ‚Ü¶ H.carrier‚ü©
    -- This instance permits the use of `H : Subgroup G`. An element `a : H`,
    -- will have two properties: `a.val`, which is of type `G`, and
    -- `a.property`, which is the hypothesis that `a.val ‚àà H`.
    instance {G : Type u} [Group G] : CoeSort (Subgroup G) (Type u) := ‚ü®Œª H ‚Ü¶ H.carrier‚ü©
    -- For more information on coercions, consult the link below.
    -- https://lean-lang.org/functional_programming_in_lean/type-classes/coercion.html

    -- More notation! This allows us to use the element-of symbol (‚àà) for subgroups.
    instance {G : Type*} [Group G] : Membership G (Subgroup G) :=
      ‚ü®Œª g H ‚Ü¶ g ‚àà H.carrier‚ü©

    -- The instances above allow us to assert that `H : Subgroup G` is itself a
    -- group. We do this by implementing our `Group` interface on all `H`. As
    -- you complete the proofs yourself, you will notice that many of the
    -- properties are inherited from the parent group's structure, so the mere
    -- assertion of closure of H under Œº and Œπ are sufficient to prove that H is
    -- a group!
    instance [Group G] {H : Subgroup G} : Group H where
      -- Our operation now needs to be of type H ‚Üí H ‚Üí H instead of G ‚Üí G ‚Üí G.
      -- The ‚ü® ‚ü© notation divides the subgroup elements into its two properties.
      op := Œª ‚ü®a, ha‚ü© ‚ü®b, hb‚ü© ‚Ü¶ by
        have Œº_closed : Œº a b ‚àà H
        -- SOLUTION
        ¬∑ exact H.mul_closure a b ha hb

        -- Create an element of H from G, again using ‚ü® ‚ü© notation.
        exact ‚ü®Œº a b, Œº_closed‚ü©

      op_assoc := by
        -- Hint: you can use ‚ü® ‚ü© notation in `intro` as well!
        intro a b c
        ext
        apply op_assoc

      -- Make sure to provide both an element e : G and a proof that e ‚àà H.
      id := ‚ü®ùïñ, H.nonempty‚ü©

      -- Recall that the next two fields are proofs. If you ever forget the type
      -- signature of a structure field, you may either scroll to consult the
      -- definition, or alternatively, if one is viewing this document in Visual
      -- Studio Code, one may hover over the name of the field.
      id_op := by
        intro a
        ext
        apply id_op

      op_id := by
        intro a
        ext
        apply op_id

      -- Similarly to what we did above for `op`, we must show that `inv` is
      -- also closed.
      inv := Œª ‚ü®a, ha‚ü© ‚Ü¶ by

        have Œπ_closed : Œπ a ‚àà H
        -- SOLUTION
        ¬∑ exact H.inv_closure a ha

        exact ‚ü®Œπ a, Œπ_closed‚ü©

      inv_op := by
        intro a
        ext
        apply inv_op

    -- The largest possible subgroup of G contains every element of G.
    def Complete [Group G] : Subgroup G where
      carrier := Set.univ

      -- Try to come up with one-line solutions for each of the below proofs
      -- PROOFS BELOW ARE SOLUTIONS
      nonempty := by
        exact trivial

      mul_closure := by
        exact Œª a b ha hb ‚Ü¶ trivial

      inv_closure := by
        exact Œª a ha ‚Ü¶ trivial

    -- The smallest possible subgroup of G is called _trivial_ subgroup. What
    -- would this smallest subgroup be?
    def Trivial [Group G] : Subgroup G where
      -- BELOW ARE SOLUTIONS
      carrier := {ùïñ}
      nonempty := by
        trivial
      mul_closure := by
        intro a b ha hb
        rw [ha, hb, op_id]
        trivial
      inv_closure := by
        intro a ha
        rw [ha, inv_id]
        trivial

    def Centralizer [Group G] (S : Set G) : Subgroup G where
      -- FIXME : all are written with primitive group axioms. If more robust
      -- ones are provided in ch. 1, we can work to use those instead.
      carrier := {g | ‚àÄ s ‚àà S, Œº g s = Œº s g}
      nonempty := by
        intro s hs
        rw [id_op, op_id]
      mul_closure := by
        intro a b ha hb s hs
        rw [op_assoc, hb, ‚Üêop_assoc, ha, op_assoc] <;> exact hs
      inv_closure := by
        -- Nasty, but works
        intro a ha s hs
        symm
        rw [‚Üêop_id s, ‚Üêop_inv a]
        repeat rw [‚Üêop_assoc]
        apply congr <;> try rfl
        rw [op_assoc, op_inv, op_id]
        nth_rw 1 [‚Üêid_op s]
        rw [‚Üêinv_op a]
        repeat rw [op_assoc]
        apply congr <;> try rfl
        apply congr <;> try rfl
        exact ha s hs

    def conjugate [Group G] (n g : G) : G := Œº (Œº n g) (Œπ g)

    def Normalizer [Group G] (S : Set G) : Subgroup G where
      carrier := {g | ‚àÄ s ‚àà S, Œº (Œº g s) (Œπ g) = s}
      nonempty := by
        intro s hs
        rw [id_op, inv_id, op_id]
      mul_closure := by
        intro a b ha hb s hs
        rw [inv_anticomm]
        rw [op_assoc, op_assoc a, ‚Üêop_assoc s, ‚Üêop_assoc b, ‚Üêop_assoc b]
        rw [hb s hs, ‚Üêop_assoc, ha s hs]
      inv_closure := by
        intro a ha b hb
        have inv_inv_eq_self : ‚àÄ g : G, Œπ (Œπ g) = g := by
          intro x
          have h1 : ‚àÄ g : G, Œº (Œπ (Œπ g)) (Œπ g) = ùïñ := by
            intro y
            rw[inv_op]
          have h2 : ‚àÄ g : G, Œº (g) (Œπ g) = ùïñ := by
            intro z
            rw[op_inv] --ONLY VALID WITH op_inv PROOF
          have h1_x := h1 x
          have h2_x := h2 x
          rw [‚Üê h2_x] at h1_x
          sorry -- FIXME do we have a uniqe inverse theorem?
        have h3_a := inv_inv_eq_self a
        rw [h3_a]
        have h3 : Œº (Œº a b) (Œπ a) = b ‚Üí Œº (Œº (Œπ a) b) a = b := by
          intro ht
          have hp : Œº (Œº a b) (Œπ a) = b ‚Üí Œº (Œπ a) (Œº (Œº a b) (Œπ a)) = Œº (Œπ a) b := by
            intro hu
            rw [hu]
          apply hp at ht
          rw [op_assoc, ‚Üê op_assoc, inv_op, id_op] at ht
          have hq : Œº b (Œπ a) = Œº (Œπ a) b ‚Üí Œº (Œº b (Œπ a)) a = Œº (Œº (Œπ a) b) a := by
            intro hu
            rw [hu]
          apply hq at ht
          rw [op_assoc, inv_op, op_id] at ht
          symm
          exact ht
        rw [h3]
        have ha_b := ha b
        apply ha_b at hb
        exact hb

    variable {G : Type*} [Group G]

    -- We define a subgroup to be _normal_ if the subgroup is closed under
    -- conjugation with any element of G.
    -- TODO: include conjugation in the definition?
    def normal [Group G] (H : Subgroup G) : Prop :=
      ‚àÄ g h : G, h ‚àà H ‚Üí Œº (Œº g h) (Œπ g) = h

    theorem foldml_append [Monoid M] (xs ys : List M)
        : List.foldl Œº ùïñ (xs ++ ys) = Œº (List.foldl Œº ùïñ xs) (List.foldl Œº ùïñ ys) := by
      sorry

    def Generate (S : Set G) : Subgroup G where
      carrier := {g | ‚àÉ xs : List {s : G // s ‚àà S ‚à® Œπ s ‚àà S}, List.foldl Œº (ùïñ : G) xs = g}
      nonempty := Exists.intro [] rfl
      mul_closure := by
        dsimp at *
        intro a b ‚ü®as, has‚ü© ‚ü®bs, hbs‚ü©
        use as ++ bs
        sorry
      inv_closure :=
      sorry

    def Homomorphism [Group G] [Group H] (œÜ : G ‚Üí H) : Prop := ‚àÄ a b : G, Œº (œÜ a) (œÜ b) = œÜ (Œº a b)

    def Kernel [Group G] [Group H] (œÜ : G ‚Üí H) (h : Homomorphism œÜ) : Subgroup G where
      carrier := {g | œÜ g = ùïñ}
      nonempty := sorry
      mul_closure := sorry
      inv_closure := sorry

  end Subgroups

end Defs
