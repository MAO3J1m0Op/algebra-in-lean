import ¬´AlgebraInLean¬ª.Basic

namespace Defs

  namespace Subgroups

    -- If G is a group, then a subgroup H of G is a subset of G that is itself
    -- a group under G's group operation satisfying three properties.
    -- 1. The identity in G is the identity in H (H is therefore nonempty)
    -- 2. ‚àÄ a, b ‚àà H then Œº a b ‚àà H
    -- 3. ‚àÄ a ‚àà H, then Œπ a ‚àà H
    -- Subgroups are denoted by the less than or equal sign, so we write H ‚â§ G.
    -- We encode a subgroup as a Lean structure, notably not as a type class
    -- to emphasize that subgroups are simply subsets of groups satisfying
    -- specific properties.
    structure Subgroup (G : Type*) [Group G] where
      -- We represent the subgroup's corresponding set using Mathlib's `Set`
      -- type. Upon viewing the Mathlib documentation for the set (if you are
      -- viewing this file in Visual Studio Code, you may Ctrl-Click on the
      -- keyword to consult its definiton), we see that it is merely a wrapper
      -- for `G ‚Üí Prop`, meaning it is a function that determines what is and
      -- is not in the set.
      carrier : Set G
      -- This proposition asserts that the group is nonempty, namely that the
      -- subgroup contains the identity of G.
      nonempty : ùïñ ‚àà carrier
      -- The below propositions assert that the subgroup is closed under the
      -- group operation Œº and the inverse function Œπ.
      mul_closure : ‚àÄ a b, a ‚àà carrier ‚Üí b ‚àà carrier ‚Üí Œº a b ‚àà carrier
      inv_closure : ‚àÄ a : G, a ‚àà carrier ‚Üí Œπ a ‚àà carrier

    -- This instance coerces `Subgroup G` to `Set G`.
    instance [Group G] : Coe (Subgroup G) (Set G) := ‚ü®Œª H ‚Ü¶ H.carrier‚ü©
    -- This instance permits the use of `H : Subgroup G`. An element `a : H`,
    -- will have two properties: `a.val`, which is of type `G`, and
    -- `a.property`, which is the hypothesis that `a.val ‚àà H`.
    instance {G : Type u} [Group G] : CoeSort (Subgroup G) (Type u) := ‚ü®Œª H ‚Ü¶ H.carrier‚ü©
    -- For more information on coercions, consult the link below.
    -- https://lean-lang.org/functional_programming_in_lean/type-classes/coercion.html

    -- This notation allows us to use the element-of symbol (‚àà) for subgroups.
    instance {G : Type*} [Group G] : Membership G (Subgroup G) :=
      ‚ü®Œª g H ‚Ü¶ g ‚àà H.carrier‚ü©

    -- The instances above allow us to assert that `H : Subgroup G` is itself a
    -- group. We do this by implementing our `Group` interface on all `H`. As
    -- you complete the proofs yourself, you will notice that many of the
    -- properties are inherited from the parent group's structure, so the mere
    -- assertion of closure of H under Œº and Œπ are sufficient to prove that H
    -- is a group!
    instance [Group G] {H : Subgroup G} : Group H where
      -- Our operation now needs to be of type H ‚Üí H ‚Üí H instead of G ‚Üí G ‚Üí G.
      -- The ‚ü® ‚ü© notation divides the subgroup elements into its two properties.
      op := Œª ‚ü®a, ha‚ü© ‚ü®b, hb‚ü© ‚Ü¶ by
        have Œº_closed : Œº a b ‚àà H
        -- SOLUTION
        ¬∑ exact H.mul_closure a b ha hb

        -- Create an element of H from G, again using ‚ü® ‚ü© notation.
        exact ‚ü®Œº a b, Œº_closed‚ü©

      op_assoc := by
        -- Hint: you can use ‚ü® ‚ü© notation in `intro` as well!
        intro a b c
        ext
        apply op_assoc

      -- Make sure to provide both an element e : G and a proof that e ‚àà H.
      id := ‚ü®ùïñ, H.nonempty‚ü©

      -- Recall that the next two fields are proofs. If you ever forget the type
      -- signature of a structure field, you may either scroll to consult the
      -- definition, or alternatively, if one is viewing this document in Visual
      -- Studio Code, one may hover over the name of the field.
      id_op := by
        intro a
        ext
        apply id_op

      op_id := by
        intro a
        ext
        apply op_id

      -- Similarly to what we did above for `op`, we must show that `inv` is
      -- also closed.
      inv := Œª ‚ü®a, ha‚ü© ‚Ü¶ by

        have Œπ_closed : Œπ a ‚àà H
        -- SOLUTION
        ¬∑ exact H.inv_closure a ha

        exact ‚ü®Œπ a, Œπ_closed‚ü©

      inv_op := by
        intro a
        ext
        apply inv_op

    -- The largest possible subgroup of G contains every element of G. We
    -- call this subgroup as `Maximal`, and it represents the specific case
    -- H ‚â§ G where H = G.
    def Maximal [Group G] : Subgroup G where
      carrier := Set.univ

      -- Try to come up with one-line solutions for each of the below proofs
      -- PROOFS BELOW ARE SOLUTIONS
      nonempty := by
        exact trivial

      mul_closure := by
        exact Œª a b ha hb ‚Ü¶ trivial

      inv_closure := by
        exact Œª a ha ‚Ü¶ trivial

    -- The smallest possible subgroup of G is called the _trivial_ subgroup.
    -- What would this smallest subgroup be?
    -- To avoid confusion with the already defined `trivial` in Lean, we will
    -- call this `Minimal`.
    def Minimal [Group G] : Subgroup G where
      -- BELOW ARE SOLUTIONS
      carrier := {ùïñ}
      nonempty := by
        trivial
      mul_closure := by
        intro a b ha hb
        rw [ha, hb, op_id]
        trivial
      inv_closure := by
        intro a ha
        rw [ha, inv_id]
        trivial

    -- Maybe add subgroup criterion??

    -- The following definition relies on G being a group, so we'll define
    -- it as such for the subsequent proof.
    variable {G : Type*} [Group G]

    -- Given a group G and a subset of that group, S, the subgroup generated
    -- by S is the smallest order subgroup H ‚â§ G such that S ‚äÜ H. We show that
    -- such a subset H which contains S is a subgroup in the example below.
    def Generate (S : Set G) : Subgroup G where
      carrier := {g : G | ‚àÄ H : Subgroup G, S ‚äÜ H ‚Üí g ‚àà H}
      nonempty := by
        intro H _
        exact H.nonempty
      mul_closure := by
        dsimp at *
        intro a b ha hb H hH
        apply H.mul_closure
        ¬∑ exact ha H hH
        ¬∑ exact hb H hH
      inv_closure := by
        intro a ha H hH
        apply H.inv_closure
        exact ha H hH

  end Subgroups

end Defs
