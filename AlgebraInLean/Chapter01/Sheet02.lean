import AlgebraInLean.Chapter01.Sheet01

namespace AlgebraInLean

/-
Groups aren't the only important structures in algebra. By including or excluding certain properties
from our definition, we create different structures.
-/

/-- A magma is the simples algebraic structure, which only has a closed binary operation -/
class Magma (Œ± : Type*) where
  /-
  `protected` means that this definition should always be referenced as `Magma.op` since `Œº` (below)
  should be used instead
  -/
  protected op : Œ± ‚Üí Œ± ‚Üí Œ±

variable {Œ± : Type*}

/-- The operation on a `Magma` or derived structure -/
def Œº [Magma Œ±] : Œ± ‚Üí Œ± ‚Üí Œ± := Magma.op

/-- A semigroup is a magma where the operation is associative -/
class Semigroup (Œ± : Type*) extends Magma Œ± where
  -- extends means that it inherits the properties of a `Magma`
  protected op_assoc : ‚àÄ (a b c : Œ±), Œº (Œº a b) c = Œº a (Œº b c)

/-- (a ‚¨ù b) ‚¨ù c = a ‚¨ù (b ‚¨ù c) -/
theorem op_assoc [Semigroup Œ±] (a b c : Œ±) : Œº (Œº a b) c = Œº a (Œº b c) := Semigroup.op_assoc a b c

/-- A monoid is a semigroup with identity -/
class Monoid (Œ± : Type*) extends Semigroup Œ± where
  protected id : Œ±
  protected op_id : ‚àÄ (a : Œ±), Œº a id = a
  protected id_op : ‚àÄ (a : Œ±), Œº id a = a

/-- The identity element of a monoid or derived structure -/
def ùïñ [Monoid Œ±] : Œ± := Monoid.id

/-- a ‚¨ù 1 = a -/
theorem op_id [Monoid Œ±] : ‚àÄ (a : Œ±), Œº a ùïñ = a := Monoid.op_id

/-- 1 ‚¨ù a = a -/
theorem id_op [Monoid Œ±] : ‚àÄ (a : Œ±), Œº ùïñ a = a := Monoid.id_op

/-- Commutative monoids have the additional property that the operation is commutative -/
class CommMonoid (Œ± : Type*) extends Monoid Œ± where
  protected op_comm : ‚àÄ (a b : Œ±), Œº a b = Œº b a

/-- a ‚¨ù b = b ‚¨ù a -/
theorem op_comm [CommMonoid Œ±] (a b : Œ±) : Œº a b = Œº b a := CommMonoid.op_comm a b

/-- A group is a monoid with inverses -/
class Group (Œ± : Type*) extends Monoid Œ± where
  protected inv : Œ± ‚Üí Œ±
  protected inv_op : ‚àÄ (a : Œ±), Œº (inv a) a = ùïñ

-- The inverse map of a group or derived structure -/
def Œπ [Group Œ±] : Œ± ‚Üí Œ± := Group.inv

/-- a‚Åª¬π ‚¨ù a = ùïñ -/
theorem inv_op [Group Œ±] (a : Œ±) : Œº (Œπ a) a = ùïñ := Group.inv_op a

/-- An abelian group is a group with commutativity -/
class AbelianGroup (G : Type*) extends Group G, CommMonoid G

-- Lean doesn't automatically make these after the first extended class
instance [AbelianGroup Œ±] : CommMonoid Œ± where
  op_comm := op_comm


/-
These are the definitions that will be used moving forwards. Since the previous proof of `op_inv`
used the other definition of `Group`, we need to reprove it.
-/
/-- a ‚¨ù a‚Åª¬π = 1 -/
theorem op_inv [Group Œ±] (a : Œ±) : Œº a (Œπ a) = ùïñ := by
  rw [ ‚Üêid_op (Œº a _)
     , ‚Üêinv_op (Œπ a)
     , op_assoc
     , ‚Üêop_assoc (Œπ a)
     , inv_op
     , id_op
     ]

/- Try to prove a theorem using the new definitions. -/
/-- a ‚¨ù b = a ‚¨ù c ‚áí b = c -/
theorem left_cancel [Group Œ±] (a b c : Œ±) (h : Œº a b = Œº a c) : b = c := by
  -- sorry
  -- SAMPLE SOLUTION
  rw [‚Üêid_op b, ‚Üêid_op c, ‚Üêinv_op a, op_assoc, op_assoc, h]
  -- END OF SAMPLE SOLUTION
