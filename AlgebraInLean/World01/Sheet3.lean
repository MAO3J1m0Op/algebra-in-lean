import AlgebraInLean.World01.Sheet2

namespace AlgebraInLean

/- Concretely naming one element of a group as the identity, and having an
inverse function that gives one output gives the impression that the
identity and inverses are unique. This can be proven-/

/- Since the proof of op_inv used the previous definition of Group, we need
to reprove it using the new definition-/
theorem op_inv {G : Type*} [Group G] (a : G) : Œº a (Œπ a) = ùïñ := by
  rw [(id_op (Œº a (Œπ a))).symm, (inv_op (Œπ a)).symm]
  rw [op_assoc, (op_assoc (Œπ a) a (Œπ a)).symm, inv_op, id_op]


/- This proves that the identity is unique. This theorem only requires G to
be a monoid, so that is all we will assume-/
theorem identity_uniqueness [Monoid G] (e2 : G) : (‚àÄ a : G, (Œº a e2 = a ‚àß Œº e2 a = a)) ‚Üí e2 = ùïñ := by
  -- sorry
  -- SAMPLE SOLUTION
  intro ha
  specialize ha ùïñ
  obtain ‚ü®ha1, ha2‚ü© := ha
  rw [id_op] at ha1
  exact ha1
  -- END OF SAMPLE SOLUTION

/- This proves that inverses are unique-/
theorem inverse_uniqueness [Group G] (a i : G) : (Œº a i = ùïñ ‚àß Œº i a = ùïñ) ‚Üí i = Œπ a := by
  -- sorry
  -- SAMPLE SOLUTION
  intro ha
  obtain ‚ü®ha1, _‚ü© := ha
  rw [(op_id (Œπ a)).symm]
  rw [ha1.symm]
  rw [(op_assoc (Œπ a) a i).symm]
  rw [inv_op, id_op]
  -- END OF SAMPLE SOLUTION

/- Now that we have the uniqueness theorems, we can prove some more interesting
theorems about the identity and inverses-/
theorem shoes_and_socks [Group G] (a b : G) : Œπ (Œº a b) = Œº (Œπ b) (Œπ a) := by
  -- sorry
  -- SAMPLE SOLUTION
  symm
  apply inverse_uniqueness
  constructor
  rw[op_assoc, (op_assoc b (Œπ b) (Œπ a)).symm, op_inv, id_op, op_inv]
  rw[op_assoc, (op_assoc (Œπ a) a b).symm, inv_op, id_op, inv_op]
  -- END OF SAMPLE SOLUTION
