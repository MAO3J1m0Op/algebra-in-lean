import AlgebraInLean.Basic
import AlgebraInLean.Chapter2.Sheet1
import Mathlib.Tactic

namespace Sheet2

namespace Defs

-- ## Homomorphisms and Isomorphisms

-- Like many other things in abstract algebra, you will find that you have seen
-- homomorphisms before, even if you weren't aware that they _were_
-- homomorphisms. For example, the determinant of an n √ó n Real matrix is a
-- homomorphism from the group GL_n(‚Ñù) to (‚Ñù, *).

-- Below, we provide other examples of homomorphisms and isomorphisms with
-- concrete examples of groups that you have already seen before in Chapter 1.

-- We formally introduce the notion of a cyclic group. You have seen this in
-- the previous chapter, as the group of rotational symmetries of an n-gon.

-- Let's look at it through a different lens. C‚ÇÉ is "the cyclic group of order
-- 3". A cyclic group is one that is generated by a single element. In effect,
-- it is the group you get by applying a non-identity element, say g, to
-- itself. For example, the elements of the cyclic group of order 4 can be
-- written {ùïñ, g, g¬≤, g¬≥}. Note that we can write the element ùïñ as g‚Å∞. g is
-- then referred to as the "generator" of the group, and the group generated by
-- an element g can be written <g>. You'll learn more about generators in
-- Chapter 2.

-- We'll use the definition of C‚Çô that you've seen in Chapter 1. Hopefully,
-- you've already proved that it is a group, so we're good to go.

def Cn (n : ‚Ñï): Type := Fin n
def fCn (n : ‚Ñï) : (Cn n) ‚Üí (Cn n) ‚Üí (Cn n) := Fin.add
def inv_fCn (n : ‚Ñï) : (Fin n) ‚Üí (Fin n) := fun x => -x

-- We introduce a closely related group; the integers _modulo_ some natural
-- number n. The definition is virtually identical. We write this as ‚Ñ§/n‚Ñ§, for
-- reasons that will become apparent when you eventually come across _quotient
-- groups_. We pronounce ‚Ñ§/n‚Ñ§ as "Z mod n Z".

def ZModnZ (n : ‚Ñï) : Type := Fin n
def fZModnZ (n : ‚Ñï) : (ZModnZ n) ‚Üí (ZModnZ n) ‚Üí (ZModnZ n) := Fin.add
def inv_ZModnZ (n : ‚Ñï) : (Fin n) ‚Üí (Fin n) := fun x => -x

-- The similarity between C‚Çô and ‚Ñ§/n‚Ñ§ might lead one to ask: are they
-- isomorphic? In order to answer that excellent question, let's prove a more
-- lenient result and work our way up to isomorphism:

-- TODO: Consider scrapping everything here and look at more abstract examples of isomorphism. Why? Maybe a better idea to introduce ‚Ñ§/n‚Ñ§ when quotient groups are introduced... also, formally considering isomorphisms between groups requires considering orders or elements. :(

-- TODO: Show that a map œÜ : n ‚Üí g‚Åø is a homomorphism from ‚Ñ§/3‚Ñ§ to C‚ÇÉ.

theorem mod3_hom_to_cyclic3 (C3 : Defs.Group (Cn 3)) (Z3 : Defs.Group (ZModnZ 3)) (g : G) (œÜ : C3 ‚Üí Z3) : Homomorphism œÜ := by
  sorry

-- TODO: Show that a map œÜ : n ‚Üí g‚Åø is an isomorphism from ‚Ñ§/3‚Ñ§ to C‚ÇÉ.

theorem mod3_iso_to_cyclic3 (C3 : Defs.Group (Cn 3)) (Z3 : Defs.Group (ZModnZ 3)) (g : G) (œÜ : C3 ‚Üí Z3) : Isomorphism œÜ := by
  sorry

-- TODO: Generalise the above: ‚Ñ§/n‚Ñ§ is isomorphic to C‚Çô, with the map being the
-- same.

theorem modn_iso_to_cyclicn (Cn : Defs.Group (Cn n)) (Zn : Defs.Group (ZModnZ n)) (g : G) (œÜ : Cn ‚Üí Zn) : Isomorphism œÜ := by
  sorry

/- ... -/

